{"version":3,"sources":["components/USTable.js","components/Chart.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["USTable","props","getDailyCases","console","log","data","CountryCode","country","axios","get","then","response","setState","state","catch","error","renderNum","pass","toLocaleString","minimumFractionDigits","maximumFractionDigits","renderAvg","type","sum","forEach","object","index","Confirmed","length","Recovered","Deaths","visible","country_code","this","bottom","cascade","className","class","style","color","TotalConfirmed","TotalDeaths","TotalRecovered","Component","Chart","formatXAxis","tickItem","slice","findMonth","val","str","formatTooltipLabel","elem","mon","day","concat","renderCharts","width","height","margin","top","right","left","strokeDasharray","dataKey","tickFormatter","domain","value","Intl","NumberFormat","format","labelFormatter","formatter","wrapperStyle","stroke","TabPane","Tabs","Panel","Collapse","Main","callAPI","summaryData","Countries","globalData","Global","Country","push","handleModeChange","e","mode","target","onChange","activeKey","callback","key","renderTabPanes","countries","sortBy","reverse","map","tab","defaultActiveKey","header","chartData","array","sort","a","b","x","y","tabPosition","App","id","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.00ac32b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport '../css/USTable.css';\r\nimport Fade from \"react-reveal/Fade\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass USTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visible: false,\r\n      country_code: \"\",\r\n      response: [],\r\n    };\r\n  }\r\n\r\n  getDailyCases = () => {\r\n    console.log(this.props.data.CountryCode);\r\n    if (this.props.data) {\r\n      let country = this.props.data.CountryCode;\r\n      axios\r\n        .get(\"https://api.covid19api.com/total/dayone/country/\" + country)\r\n        .then((response) => {\r\n          this.setState({\r\n            response: response.data,\r\n          });\r\n          console.log(this.state);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDailyCases();\r\n  }\r\n\r\n  renderNum = (pass) => {\r\n    if (pass) {\r\n      let val = pass;\r\n      return val.toLocaleString(\"en\", {   \r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0,\r\n    });\r\n    }\r\n  };\r\n\r\n  renderAvg = (type) => {\r\n    let sum = 0;\r\n    let data = this.state.response;\r\n    if (data) {\r\n      switch (type) {\r\n        case \"Confirmed\":\r\n          data.forEach((object, index) => {\r\n            sum = (sum + object.Confirmed) / data.length;\r\n          });\r\n          break;\r\n        case \"Recovered\":\r\n          data.forEach((object, index) => {\r\n            sum = (sum + object.Recovered) / data.length;\r\n          });\r\n          break;\r\n        case \"Deaths\":\r\n          data.forEach((object, index) => {\r\n            sum = (sum + object.Deaths) / data.length;\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return this.renderNum(sum);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fade bottom cascade>\r\n        <div className=\"container\">\r\n          <div class=\"row table-number\">\r\n          <div class=\"col-4\">confirmed cases</div>\r\n            <div class=\"col-4\" style={{ color: \"orange\" }}>\r\n              {this.renderNum(this.props.data.TotalConfirmed)}\r\n              \r\n            </div>\r\n            <div class=\"col-4\">total deaths</div>\r\n            <div class=\"col-4\" style={{ color: \"red\" }}>\r\n              {this.renderNum(this.props.data.TotalDeaths)}\r\n              \r\n            </div>\r\n            <div class=\"col-4\">total recovered</div>\r\n            <div class=\"col-4\" style={{ color: \"green\" }}>\r\n              {this.renderNum(this.props.data.TotalRecovered)}\r\n              \r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row table-label\">\r\n            \r\n            \r\n            \r\n          </div>\r\n        <hr></hr>\r\n          <div class=\"mt-2 row table-number\">\r\n          <div class=\"col-4\">avg cases/day</div>\r\n            <div class=\"col-4\" style={{ color: \"chocolate\" }}>\r\n              {this.renderAvg(\"Confirmed\")}\r\n            </div>\r\n            <div class=\"col-4\">avg deaths/day</div>\r\n            <div class=\"col-4\" style={{ color: \"brown\" }}>\r\n            {this.renderAvg(\"Deaths\")}\r\n            </div>\r\n            <div class=\"col-4\">avg recoveries/day</div>\r\n            <div class=\"col-4\" style={{ color: \"#126629\" }}>\r\n            {this.renderAvg(\"Recovered\")}\r\n            </div>\r\n          </div>\r\n          <div class=\"row table-label\">  \r\n          </div>\r\n        </div>\r\n      </Fade>\r\n    );\r\n  }\r\n}\r\n\r\nexport default USTable;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../css/Chart.css\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Line,\r\n  ComposedChart,\r\n  Area,\r\n  Bar,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n// import { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\r\n\r\nclass Chart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      response: [],\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n  getDailyCases = () => {\r\n    \r\n\r\n    if (this.props.data) {\r\n      let country = this.props.data.CountryCode;\r\n      axios\r\n        .get(\r\n          \"https://api.covid19api.com/total/dayone/country/\" +\r\n            this.props.data.CountryCode\r\n        )\r\n        .then((response) => {\r\n          this.setState({\r\n            response: response.data,\r\n          });\r\n          // console.log(this.state);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDailyCases();\r\n  }\r\n\r\n  formatXAxis = (tickItem) => {\r\n    let label = tickItem.slice(5, 10);\r\n    return label;\r\n  };\r\n\r\n  findMonth = (val) => {\r\n    let str = \"\";\r\n    switch (val) {\r\n      case \"01\":\r\n        str = \"January\";\r\n        break;\r\n      case \"02\":\r\n        str = \"February\";\r\n        break;\r\n      case \"03\":\r\n        str = \"March\";\r\n        break;\r\n      case \"04\":\r\n        str = \"April\";\r\n        break;\r\n      case \"05\":\r\n        str = \"May\";\r\n        break;\r\n      case \"06\":\r\n        str = \"June\";\r\n        break;\r\n      case \"07\":\r\n        str = \"July\";\r\n        break;\r\n      case \"08\":\r\n        str = \"August\";\r\n        break;\r\n      case \"09\":\r\n        str = \"September\";\r\n        break;\r\n      case \"10\":\r\n        str = \"October\";\r\n        break;\r\n      case \"11\":\r\n        str = \"November\";\r\n        break;\r\n      case \"12\":\r\n        str = \"December\";\r\n        break;\r\n      default:\r\n        str = \"not working\";\r\n    }\r\n    return str;\r\n  };\r\n\r\n  formatTooltipLabel = (elem) => {\r\n    let mon = elem.slice(5, 7);\r\n    let day = elem.slice(8, 10);\r\n    return this.findMonth(mon).concat(\" \" + day);\r\n  };\r\n\r\n  renderCharts = (data) => {\r\n    return (\r\n      <>\r\n        <div class=\"chart-inner\">\r\n          <p class=\"chart-inner-title\">\r\n            Total Confirmed Cases, Recovered Cases & Deaths since Jan. 22\r\n          </p>\r\n          <LineChart\r\n            width={750}\r\n            height={445}\r\n            data={data}\r\n            margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"Date\" tickFormatter={this.formatXAxis} />\r\n            <YAxis\r\n              type=\"number\"\r\n              domain={[\"auto\", 400000]}\r\n              tickFormatter={(value) =>\r\n                new Intl.NumberFormat(\"en\").format(value)\r\n              }\r\n            />\r\n            <Tooltip\r\n              labelFormatter={this.formatTooltipLabel}\r\n              formatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\r\n            />\r\n            <Legend wrapperStyle={{}} />\r\n            <Line type=\"monotone\" dataKey=\"Confirmed\" stroke=\"orange\" />\r\n            <Line type=\"monotone\" dataKey=\"Recovered\" stroke=\"green\" />\r\n            <Line type=\"monotone\" dataKey=\"Deaths\" stroke=\"red\" />\r\n          </LineChart>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"chart-container\">\r\n          {this.renderCharts(this.state.response)}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from \"react\";\r\nimport USTable from \"./USTable\";\r\nimport Chart from \"./Chart\";\r\nimport axios from \"axios\";\r\nimport '../css/Main.css';\r\nimport { Tabs, Collapse } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Panel } = Collapse;\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      summaryData: [],\r\n      globalData: [],\r\n      chartData: [],\r\n      mode: \"left\",\r\n      activeKey: \"0\",\r\n    };\r\n  }\r\n\r\n  callAPI = () => {\r\n    axios\r\n      .get(\"https://api.covid19api.com/summary\")\r\n      .then((response) => {\r\n        console.log(\"RESPONSE\", response);\r\n        this.setState({\r\n          summaryData: response.data.Countries,\r\n          globalData: response.data.Global,\r\n        });\r\n        this.state.globalData.Country = \"Global\";\r\n        this.state.globalData.CountryCode = \"Global\";\r\n        this.state.summaryData.push(this.state.globalData);\r\n        this.setState({ summaryData: this.state.summaryData });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  handleModeChange = (e) => {\r\n    const mode = e.target.value;\r\n    this.setState({ mode });\r\n  };\r\n\r\n  onChange = (activeKey) => {\r\n    this.setState({ activeKey: activeKey });\r\n  };\r\n\r\n  sortBy(array, key) {\r\n    return array.sort(function (a, b) {\r\n      var x = a[key];\r\n      var y = b[key];\r\n      return x < y ? -1 : x > y ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  callback = (key) => {\r\n    console.log(key);\r\n  };\r\n\r\n\r\n  renderTabPanes = () => {\r\n    let countries = [];\r\n    countries = this.state.summaryData;\r\n\r\n    countries = this.sortBy(this.state.summaryData, \"TotalConfirmed\");\r\n    countries.reverse();\r\n\r\n    countries = countries.map((elem, index) => {\r\n      return (\r\n        <TabPane tab={elem.Country} key={index}>\r\n          <div class=\"col-xs-12 col-md-8 pl-md-0\">\r\n              <Collapse onChange={this.callback} defaultActiveKey={[\"2\"]}>\r\n                <Panel header=\"Charts\" key=\"2\">\r\n                  <div class=\"\">\r\n                    <Chart data={elem} />\r\n                  </div>\r\n                </Panel>\r\n              </Collapse>\r\n            </div>\r\n          <h4 class=\"title ml-2\">{elem.Country}</h4>\r\n\r\n          <div className=\"statistics-div\">\r\n            <div >\r\n              <Collapse onChange={this.callback} defaultActiveKey={[\"1\"]}>\r\n                <Panel header=\"Statistics\" key=\"1\">\r\n                  <USTable data={elem} />\r\n                </Panel>\r\n              </Collapse>\r\n            </div>\r\n\r\n          </div>\r\n        </TabPane>\r\n      );\r\n    });\r\n\r\n    return countries;\r\n  };\r\n\r\n  render() {\r\n    const { mode } = this.state;\r\n    return (\r\n      <div class=\"App\">\r\n        <Tabs\r\n          activeKey={this.state.activeKey}\r\n          tabPosition={mode}\r\n          style={{ height: \"100vh\" }}\r\n          onChange={this.onChange}\r\n        >\r\n          {this.renderTabPanes()}\r\n        </Tabs>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router, Route , Link } from \"react-router-dom\";\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <Router>\n      <div id=\"outer-container\">\n          {/* <Navbar /> */}\n          <div className=\"\">\n            <Route path=\"/\" component={Main}/>\n          </div>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}